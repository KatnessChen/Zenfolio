name: Price Service CI

# This workflow runs essential checks on the price_service Go application
# Tests are focused on unit tests and integration with external APIs

on:
  pull_request:
    paths:
      - "price_service/**"
  push:
    branches: [main, develop]
    paths:
      - "price_service/**"
  workflow_dispatch:

defaults:
  run:
    working-directory: ./price_service

jobs:
  test:
    name: Test and Build
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t price-service:ci .

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.61.0

      - name: Run linting
        run: |
          docker run --rm price-service:ci golangci-lint run --timeout=5m

      - name: Vet check
        run: |
          docker run --rm price-service:ci go vet ./...

      - name: Run tests in Docker container
        run: |
          docker run --rm \
            --env PORT=8081 \
            --env GIN_MODE=test \
            --env API_KEY=test-api-key \
            --env STOCK_API_PROVIDER=alpha_vantage \
            --env STOCK_API_KEY=demo \
            --env STOCK_API_BASE_URL=https://www.alphavantage.co/query \
            --env REDIS_HOST=localhost \
            --env REDIS_PORT=6379 \
            --env REDIS_PASSWORD= \
            --env REDIS_DB=1 \
            --env DEFAULT_TTL_MINUTES=5 \
            --env MAX_SYMBOLS_PER_REQUEST=10 \
            --env RATE_LIMIT_REQUESTS=100 \
            --env RATE_LIMIT_WINDOW_MINUTES=1 \
            price-service:ci go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./price_service/coverage.out
          flags: price-service
          name: price-service-coverage

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: price-service-test-results
          path: |
            price_service/coverage.out
